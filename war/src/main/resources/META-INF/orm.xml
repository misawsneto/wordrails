<?xml version="1.0" encoding="UTF-8" ?>

<entity-mappings xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm"
                 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                 xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence/orm
    			 					 http://xmlns.jcp.org/xml/ns/persistence/orm_2_1.xsd"
                 version="2.1">

	<named-query name="Cell.findCellsPositioned">
		<query>
			<![CDATA[
				select cell 
				from Cell cell join cell.row row  
				where row.id = :rowId and cell.index >= :lowerLimit and cell.index < :upperLimit 	
				order by cell.index
			]]>
		</query>
	</named-query>

	<named-query name="TermPerspective.findPerspectiveAndTerm">
		<query>
			select termPerspective
			from TermPerspective termPerspective join termPerspective.term term join termPerspective.perspective
			perspective
			where term.id = :termId and perspective.id = :stationPerspectiveId
		</query>
	</named-query>

	<named-query name="TermPerspective.findPerspectiveAndTermNull">
		<query>
			select termPerspective
			from TermPerspective termPerspective join termPerspective.perspective perspective
			where termPerspective.term is null and perspective.id = :stationPerspectiveId
		</query>
	</named-query>

	<named-query name="TermPerspective.findRootTermByStationPerspective">
		<query>
			select termPerspective
			from TermPerspective termPerspective join termPerspective.term term join termPerspective.perspective
			perspective
			where term.parent is null and perspective.id = :stationPerspectiveId
		</query>
	</named-query>

	<named-query name="Term.findTagsByWordpress">
		<query>
			select term
			from Term term
			join term.taxonomy taxonomy
			join taxonomy.owningStation station
			join station.wordpress wordpress
			where wordpress = :wordpress and taxonomy.type = 'T'
		</query>
	</named-query>

	<named-query name="Term.findCategoriesByWordpress">
		<query>
			select term
			from Term term, StationPerspective p
			join term.taxonomy t1
			join p.taxonomy t2
			join p.station station
			join station.wordpress wordpress
			where wordpress = :wordpress and t1.type != 'T' and t1.type != 'A' and t1 = t2
		</query>
	</named-query>

	<named-query name="Taxonomy.findTypeTByWordpress">
		<query>
			select t
			from Taxonomy t
			join t.owningStation station
			where station.wordpress = :wordpress and t.type = 'T'
		</query>
	</named-query>

	<named-query name="Taxonomy.findByWordpress">
		<query>
			select t
			from Taxonomy t, StationPerspective p
			join p.station station
			where station.wordpress = :wordpress and t.type != 'T' and t.type != 'A' and t = p.taxonomy
		</query>
	</named-query>

	<named-query name="Taxonomy.findTypeTByStation">
		<query>
			select t
			from Taxonomy t
			join t.owningStation station
			where station = :station and t.type = 'T'
		</query>
	</named-query>

	<named-query name="Taxonomy.findByStation">
		<query>
			select t
			from Taxonomy t, StationPerspective p
			join p.station station
			where station = :station and t.type != 'T' and t.type != 'A' and t = p.taxonomy
		</query>
	</named-query>

	<named-query name="Station.findByWordpressToken">
		<query>
			select s from Station s join s.wordpress wordpress where wordpress.token = :wordpressToken
		</query>
	</named-query>

	<named-query name="Taxonomy.findNetworkOrStationTaxonomiesByNetworkIdExcludeType">
		<query>
			select
			t
			from
			Taxonomy t
			where
			t.id IN (select
			taxonomy.id
			from
			Taxonomy taxonomy join taxonomy.owningStation station
			where station.network.id = :networkId and taxonomy.type != :type)

			OR t.id IN (select
			taxonomy.id
			from
			Taxonomy taxonomy join taxonomy.owningNetwork network
			where network.id = :networkId)
		</query>
	</named-query>

	<named-query name="Taxonomy.findByStationsIds">
		<query>
			select
			t
			from
			Taxonomy t join t.owningStation station
			where
			station.id IN (:stationsIds)
		</query>
	</named-query>

	<named-query name="Taxonomy.findAuthorTaxonomyByStationId">
		<query>
			select t from Taxonomy t where t.owningStation = :station and t.type = :taxonomyType
		</query>
	</named-query>

	<named-query name="Taxonomy.findByTermsIds">
		<query>
			select term.taxonomy from Term term where term.id IN (:termsIds)
		</query>
	</named-query>

	<named-query name="Taxonomy.findByStationId">
		<query>
			select taxonomy
			from Taxonomy taxonomy
			where

			taxonomy.id in (
			select t.id
			from Taxonomy t join t.owningStation station
			where station.id = :stationId
			)

			or taxonomy.id in
			(
			select t.id
			from Taxonomy t join t.owningNetwork network
			where :stationId member of network.stations
			)

			or taxonomy.id in
			(
			select t.id
			from Taxonomy t join t.networks network
			where :stationId member of network.stations
			)
		</query>
	</named-query>

	<named-query name="Term.findTermAuthorTaxonomy">
		<query>
			select t from Term t where t.name = :name and t.taxonomy = :taxonomy
		</query>
	</named-query>

	<named-query name="Term.findTreeByTermId">
		<query>
			select t from Term t left join fetch t.children where t.id = :termId
		</query>
	</named-query>

	<named-query name="findTreeByTaxonomyId">
		<query>
			select t from Term t left join fetch t.children where t.taxonomy.id = :taxonomyId
		</query>
	</named-query>

	<named-query name="Term.countTerms">
		<query>
			select count(1) from Term term where term.id IN (:termsIds)
		</query>
	</named-query>

	<named-query name="Term.findRoots">
		<query>
			select term from Term term where term.parent is null and term.taxonomy.id = :taxonomyId
		</query>
	</named-query>

	<named-query name="Post.countSlugPost">
		<query>
			select count(1)
			from Post post
			where post.slug = :slug
		</query>
	</named-query>

	<named-query name="Post.findByFeaturedImages">
		<query>
			select post
			from Post post
			where post.featuredImage IN (:featuredImages)
		</query>
	</named-query>

	<named-query name="Post.findPostsFromOrPromotedToStation">
		<query>
			select
			post
			from
			Post post
			where
			post.id in (
			select
			p.id
			from
			Post p
			where
			p.station.id = :stationId
			)
			order by
			post.date desc
		</query>
	</named-query>

	<named-query name="Post.findPostsNotPositioned">
		<query>
			select
			post
			from
			Post post
			where
			post.id in (
			select
			p.id
			from
			Post p join p.terms t
			where
			p.station.id = :stationId and t.id in (:termsIds) and p.id not in (:idsToExclude)
			)
			order by
			post.date desc
		</query>
	</named-query>

	<named-query name="Post.findPostsPublished">
		<query>
			select post
			from Post post
			join post.terms t
			where post.station.id = :stationId and t.id in (:termsIds) and post.state = 'PUBLISHED'
			order by
			post.date desc
		</query>
	</named-query>

	<named-query name="Post.findPostsByStationIdAndAuthorId">
		<query>
			select
			p
			from
			Post p
			where
			p.station.id = :stationId and p.author.id = :authorId
			order by
			p.date desc
		</query>
	</named-query>

	<named-query name="Comment.findPostCommentsOrderByDate">
		<query>
			select
			comment
			from
			Comment comment join comment.post post
			where
			post.id = :postId
			order by comment.date
		</query>
	</named-query>

	<named-query name="Network.findByNetworkIdAndPersonId">
		<query>
			select
			nr
			from
			NetworkRole nr join nr.network n join nr.person p
			where
			n.id = :networkId AND p.id = :personId
		</query>
	</named-query>

	<named-query name="Network.findIdsByStation">
		<query>
			select
			n.id
			from
			Network n join n.stations s
			where
			s.id = :stationId
		</query>
	</named-query>

	<named-query name="Network.belongsToNetworks">
		<query>
			select
			network
			from
			Network network join network.personsNetworkRoles personRoles join personRoles.person person
			where
			person.id = :personId and network.id IN (:networksId)
		</query>
	</named-query>

	<named-query name="StationRole.findByPersonIdAndNetworkId">
		<query>
			select
			role
			from StationRole role join role.person person
			join role.station station
			where person.id = :personId and :networkId = station.network.id
		</query>
	</named-query>
	<named-query name="Station.findByPersonIdAndNetworkId">
		<query>
			select
			station
			from
			Station station
			where
			station.id IN
			(
			select
			station.id
			from
			Station station join station.personsStationRoles personRoles join personRoles.person person
			where
			person.id = :personId and :networkId = station.network.id
			)
			or

			station.id IN
			(
			select
			station.id
			from
			Station station
			where
			(station.visibility = 'UNRESTRICTED' or station.visibility = 'RESTRICTED_TO_NETWORKS')
			and :networkId = station.network.id
			)
		</query>
	</named-query>

	<named-query name="Station.belongsToStations">
		<query>
			select
			station
			from
			Station station join station.personsStationRoles personRoles join personRoles.person person
			where
			person.id = :personId and station.id IN (:stationsId)
		</query>
	</named-query>

	<named-query name="Station.belongsToStation">
		<query>
			select
			station
			from
			Station station join station.personsStationRoles personRoles join personRoles.person person
			where
			person.id = :personId and station.id = :stationId
		</query>
	</named-query>

	<named-query name="Image.findByFileId">
		<query>
			select
			image
			from
			Image image join image.original original
			join image.small small
			join image.medium medium
			join image.large large
			where
			original.id = :fileId OR
			small.id = :fileId OR
			medium.id = :fileId OR
			large.id = :fileId
		</query>
	</named-query>

	<named-query name="Bookmark.findBookmarksByPersonId">
		<query>
			select
			bookmark
			from
			Bookmark bookmark join bookmark.person person
			where
			person.id = :personId
		</query>
	</named-query>

	<named-query name="Bookmark.findBookmarksByPostId">
		<query>
			select
			bookmark
			from
			Bookmark bookmark join bookmark.post post
			where
			post.id = :postId
		</query>
	</named-query>

	<named-query name="Recommend.findRecommendsByPersonId">
		<query>
			select
			recommend
			from
			Recommend recommend join recommend.person person
			where
			person.id = :personId
		</query>
	</named-query>

	<named-query name="Recommend.findRecommendsByPostId">
		<query>
			select
			recommend
			from
			Recommend recommend join recommend.post post
			where
			post.id = :postId
		</query>
	</named-query>

	<named-query name="Recommend.findRecommendsByPersonIdOrderByDate">
		<query>
			select
			recommend
			from
			Recommend recommend join recommend.person person
			where
			person.id = :personId
			order by recommend.id desc
		</query>
	</named-query>

	<named-query name="Notification.findNotificationsByPersonIdOrderByDate">
		<query>
			select
			notification
			from
			Notification notification join notification.person person
			where
			person.id = :personId
			order by notification.createdAt desc
		</query>
	</named-query>
	<named-query name="PostRead.findPostReadByPersonIdOrderByDate">
		<query>
			select
			postRead
			from
			PostRead postRead join postRead.person person
			where
			person.id = :personId
			order by postRead.createdAt desc
		</query>
	</named-query>
	<!--
		select count(*) from post p join station s on p.station_id = s.id where s.id=:stationId and p.id not in (select pr.id from postread pr join person pe on pr.id = pe.id where pe.id=:personId); 
	 -->

	<named-query name="Post.findPostReadByStationAndPerson">
		<query>
			select
			post
			from
			Post post join post.station station
			where
			station.id = :stationId and post.id not in

			(select
			pr.id from PostRead pr join pr.person person
			where
			person.id=:personId)
		</query>
	</named-query>

	<named-query name="StationPerspective.findByStationId">
		<query>
			select
			stationPerspective
			from
			StationPerspective stationPerspective
			where
			stationPerspective.station.id = :stationId
		</query>
	</named-query>

	<named-query name="Invitation.findByInvitationHash">
		<query>
			select
			invitation
			from
			Invitation invitation
			where
			invitation.hash = :hash
		</query>
	</named-query>

	<named-query name="Post.findPopularPosts">
		<query>
			select
			post
			from
			Post post
			where
			post.station.id = :stationId
			order by
			post.date desc, post.recommendsCount desc
		</query>
	</named-query>

</entity-mappings>
