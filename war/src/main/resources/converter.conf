input {
    file {
        type => "nginx_access"
        path => ["/home/jonas/apps/trix_base/logstash-2.2.2/sample_nginx.txt"]
        start_position => "beginning"
	    sincedb_path => "/dev/null"
    }
}

filter {
    grok {
        match => [ "message" , "%{COMBINEDAPACHELOG}+%{GREEDYDATA:extra_fields}"]
        overwrite => [ "message" ]
    }

    #Removes any request with dots
    if[request] =~ /\w*\./ {
        drop { }
    }

    date {
        match => [ "timestamp" , "dd/MMM/YYYY:HH:mm:ss Z" ]
    }

    kv {
        field_split => "&? "
        source => "message"
        include_keys => ["slug", "termId"]
        trim => "<>\[\],\/\""
        trimkey => "<>\[\],\/\""
    }

    #Recommend post
    if[request] =~ /\/api\/v2\/recommends\/toggle\/\d+/ {
    	ruby {
	     code => "event['postId'] = event['request'].sub('/api/v2/recommends/toggle/', '')"
	     add_field => { "action" => "post_recommend" }
	   }
    }

    #Comment
    if[request] =~ /\/api\/posts\/\d+\/comments/ {
        ruby {
    	     code => "event['postId'] = event['request'].sub('/api/posts/', '').sub('/comments', '')"
    	     add_field => { "action" => "post_comment" }
    	}
    }


    #Bookmark post
    if[request] =~ /\/api\/v2\/bookmarks\/toggle\/\d+/ {
    	ruby {
	     code => "event['postId'] = event['request'].sub('/api/v2/bookmarks/toggle/', '')
            event['action'] = 'post_bookmark'
         "
	   }
    }

    #Read post
    if[request] =~ /\/post\?id=\d+/ {
        ruby {
            code => "event['postId'] = event['request'].sub('/post?id=', '').sub('/settings', '')
                event['action'] = 'post_read'
            "
        }
    }

    #Read body from post
    if[request] =~ /\/api\/posts\/\d+\/body/ {
        ruby {
            code => "event['postId'] = event['request'].sub('/api/posts/', '').sub('/body', '')
                event['action'] = 'post_read'
            "
        }
    }

    #Read body from post
    if[request] =~ /\/api\/posts\/\d+\/getPostViewById/ {
        ruby {
            code => "event['postId'] = event['request'].sub('/api/posts/', '').sub('/getPostViewById', '').sub('?withBody=true', '').sub('?withBody=false', '')
                event['action'] = 'post_read'
            "
        }
    }

    #Read post
    if[request] =~ /(\/api\/posts\/\d+)(?!.*\w)/ {
        ruby {
            code => "event['postId'] = event['request'].sub('/api/posts/', '').sub('/', '')
                event['action'] = 'post_read'
            "
        }
    }

    #Read post
    if[request] =~ /(\/api\/posts\/\d+)/ {
        ruby {
            code => "event['postId'] = event['request'].scan(/\d+/)[0]
                event['action'] = 'post_read'
            "
        }
    }

    if [major]{
        useragent {
            source => "agent"
            add_field => { "browser" => "%{name}" }
        }
    } else {
        useragent {
            source => "agent"
            add_field => { "browser" => "%{name}" }
        }
    }

    if[referrer] {
        mutate {
            gsub => ["referrer", "\"", ""]
        }
    }

    if[slug]{
        mutate {
            rename => {"slug" => "postSlug"}
        }
    }

    if[postSlug]{
        ruby {
            code => "require 'elasticsearch'
                client = Elasticsearch::Client.new host: 'meminstance1:9200', log: true, user: 'trix_admin', password: 'tr1xsearch'
                result = client.search index: 'trix_dev', body: {query:{bool:{must:[{term:{slug:event['postSlug']}}]}}}
                if result['hits']['hits'].length > 0
                    event['authorId'] = result['hits']['hits'][0]['_source']['authorId']
                    event['postId'] = result['hits']['hits'][0]['_source']['id']
                    event['stationId'] = result['hits']['hits'][0]['_source']['stationId']
                    event['tenantId'] = result['hits']['hits'][0]['_source']['tenantId']
                end
                "
        }
    }

    if[postId] {
        ruby {
            code => "require 'elasticsearch'
                client = Elasticsearch::Client.new host: 'meminstance1:9200', log: true, user: 'trix_admin', password: 'tr1xsearch'
                result = client.search index: 'trix_dev', body: {query:{bool:{must:[{term:{id:event['postId']}},{term:{type:'post'}}]}}}
                if result['hits']['hits'].length > 0
                    event['authorId'] = result['hits']['hits'][0]['_source']['authorId']
                    event['postSlug'] = result['hits']['hits'][0]['_source']['slug']
                    event['stationId'] = result['hits']['hits'][0]['_source']['stationId']
                    event['tenantId'] = result['hits']['hits'][0]['_source']['tenantId']
                end
                "
        }
    }

    ruby {
        code => "
            event['personId'] = 0
            event['termId'] = nil
            event['timeReading'] = nil
            event['id'] = event['message'].hash.abs
            event['timestamp'] = event['@timestamp']
        "
    }

    mutate {
        remove_field => ["path", "@version", "os", "patch", "minor", "name", "agent", "@timestamp", "ident", "auth", "major", "ES_INDEX",  "verb", "httpversion", "response", "bytes", "os_name", "request", "type"]
	   convert => { "postId" => "integer" }
	    convert => {"response" => "integer"}
        convert => {"bytes" => "integer"}
        convert => {"responsetime" => "float"}
    }
}

output {
    elasticsearch {
        action => "index"
        hosts => "meminstance1:9200"
        index => "access_index"
        workers => 1
    #     user => "trix_admin"
    #     password => "tr1xsearch"
    # }
   # stdout { codec => json }
    }
}