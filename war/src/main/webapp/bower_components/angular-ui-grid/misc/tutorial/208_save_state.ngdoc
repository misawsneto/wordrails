@ngdoc overview
@name Tutorial: 208 Save and restore state
@description

<div class="alert alert-success" role="alert"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>

The save state feature allows you to save the current look of the grid
and restore it upon returning to the grid.

For example, you may have an application where your user can reorder the columns,
adjust column widths, apply sorts and filters, and select a specific cell.  The user
might adjust their grid to look as they wish, and then navigate to another page.  When
the user returns to the page with the grid, they might expect it to look like it
did when they left.  The save state feature permits this.

Documentation for the saveState feature is provided in the api documentation, in particular:

- {@link api/ui.grid.saveState.api:GridOptions gridOptions}
- {@link api/ui.grid.saveState.api:PublicApi publicApi}

There are two core methods:

- save, which packages the current grid state into an object which the calling application
then stores somewhere (a cookie, session state, a database)
- restore, which takes a grid state object, and returns the grid to the state that
is stored in that object

Note that the saveState functionality deliberately sets out to store the transient state -
the information that isn't held in gridOptions nor columnDefs.  The calling application is responsible for
storing gridOptions and columnDefs (and must have had them in order to render the grid the first time).

The feature also provides some options that control what is saved.  All options are true by
default:

- saveWidths
- saveOrder
- saveScroll
- saveFocus
- saveVisible
- saveSort
- saveFilter
- savePinning
- saveGrouping
- saveGroupingExpandedStates
- saveTreeView
- saveSelection

@example
In this example we provide a button to save the grid state.  You can then modify the grid layout
to something different, and use the restore button to set the grid back the way it was.


<example module="app">
  <file name="app.js">
    var app = angular.module('app', ['ngAnimate', 'ngTouch', 'ui.grid', 'ui.grid.saveState', 'ui.grid.selection', 'ui.grid.cellNav', 'ui.grid.resizeColumns', 'ui.grid.moveColumns', 'ui.grid.pinning', 'ui.grid.grouping' ]);

    app.controller('MainCtrl', ['$scope', '$http', '$interval', function ($scope, $http, $interval) {
      $scope.gridOptions = {
        saveFocus: false,
        saveScroll: true,
        saveGroupingExpandedStates: true,
        enableFiltering: true,
        columnDefs: [
          { name: 'name' },
          { name: 'gender' },
          { name: 'company' }
        ],
        onRegisterApi: function(gridApi){
          $scope.gridApi = gridApi;
        }
      };
      $scope.state = {};

      $scope.saveState = function() {
        $scope.state = $scope.gridApi.saveState.save();
      };

      $scope.restoreState = function() {
        $scope.gridApi.saveState.restore( $scope, $scope.state );
      };

      $http.get('/data/100.json')
        .success(function(data) {
          $scope.gridOptions.data = data;
        });
    }]);
  </file>

  <file name="index.html">
    <div ng-controller="MainCtrl">
      <div id="gridSaveState" ui-grid="gridOptions" ui-grid-save-state ui-grid-selection ui-grid-cellNav ui-grid-resize-columns ui-grid-move-columns ui-grid-pinning ui-grid-grouping class="grid"></div>
      <button id="save" type="button" class="btn btn-success" ng-click="saveState()">Save</button>
      <button id="restore" type="button" class="btn btn-success" ng-click="restoreState()">Restore</button>
    </div>
  </file>

  <file name="main.css">
    .grid {
      width: 500px;
      height: 400px;
    }
  </file>

  <file name="scenario.js">
    var gridTestUtils = require('../../test/e2e/gridTestUtils.spec.js');
    describe( '208 save state', function() {
      gridTestUtils.firefoxReload();
      var gridId = 'gridSaveState';
      beforeEach(function(){
        // For some reason a second refresh is necessary for the correct number of columns to be returned in this test.
        browser.refresh();
      });

      it('Should start with three header columns', function(){
        gridTestUtils.expectHeaderColumnCount( gridId, 3 );
      });

      it('Should have the correct header names', function(){
        gridTestUtils.expectHeaderCellValueMatch( gridId, 0, 'Name' );
        gridTestUtils.expectHeaderCellValueMatch( gridId, 1, 'Gender' );
        gridTestUtils.expectHeaderCellValueMatch( gridId, 2, 'Company' );
      });

      it('Should have an expected value in the top left corner cell', function(){
        gridTestUtils.expectCellValueMatch( gridId, 0, 0, 'Ethel Price' );
      });

      it('Set a sort and a filter, save state, hide a column and remove sort and filter, set another sort and filter, restore the state', function () {

        gridTestUtils.clickColumnMenuSortAsc( gridId, 2 )
          .then(function () {
            return gridTestUtils.enterFilterInColumn( gridId, 1, 'female' );
          })
          .then(function () {
            gridTestUtils.expectCellValueMatch( gridId, 0, 0, 'Freda Mason' );
          })
          .then(function () {
            // return element(by.id('save')).click();
            return gridTestUtils.click(element(by.id('save')));
          })
          .then(function () {
            return gridTestUtils.clickColumnMenuRemoveSort( gridId, 2 );
          })
          .then(function () {
            return gridTestUtils.cancelFilterInColumn( gridId, 1 );
          })
          .then(function () {
            gridTestUtils.expectCellValueMatch( gridId, 0, 0, 'Ethel Price' );
          })
          .then(function () {
            return gridTestUtils.clickColumnMenuSortAsc( gridId, 0 );
          })
          .then(function () {
            return gridTestUtils.enterFilterInColumn( gridId, 2, 'Gee' );
          })
          .then(function () {
            return gridTestUtils.clickColumnMenuHide( gridId, 1 );
          })
          .then(function () {
            gridTestUtils.expectCellValueMatch( gridId, 0, 0, 'Alexander Foley' );
            gridTestUtils.expectHeaderColumnCount( gridId, 2 );
          })

          .then(function () {
            return element(by.id('restore')).click();
          })
          .then(function () {
            gridTestUtils.expectHeaderColumnCount( gridId, 3 );
            gridTestUtils.expectCellValueMatch( gridId, 0, 0, 'Freda Mason' );
          });
      });

    });
  </file>
</example>
