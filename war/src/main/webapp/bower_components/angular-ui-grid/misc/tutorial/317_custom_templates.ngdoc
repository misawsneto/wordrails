@ngdoc overview
@name Tutorial: 317 Custom Templates
@description

The grid allows you to override most of the templates, including cellTemplate, headerCellTemplate, rowTemplate
and others.  You would typically do this to inject functionality like buttons or to get a very different look and
feel that you couldn't achieve through cell classes and other settings.

It is generally good practice to at least review the standard template in https://github.com/angular-ui/ui-grid/tree/master/src/templates/ui-grid
to make sure there isn't functionality that you are overriding that you needed to keep.  In many cases it is desirable to
use the standard template as a starting point, and add your customisations on top.  Also remember that new features
or code changes may mean that you need to upgrade your custom template (if the standard template has been modified).

In this example we create a grid almost the same as the most basic one, but with a custom row template, and
with a cellTemplate that totals all the items above it in the grid.  This template continues to work when the data is
filtered or sorted.

The custom row template merges all the cells together when the entity.merge value is true.

You can use [grid.appScope](/docs/#/tutorial/305_appScope) in your row template to access
elements in your controller's scope. More details are on
the [scopes](/docs/#/tutorial/305_appScope) tutorial.

In the cellTemplate you have access to `grid`, `row` and `column`, which allows you to write any of a range of functions.

Note that the footerTemplate is rendered once for each renderContainer.  If using a custom footer template you
may want to test for `ng-if="colContainer.name === \'body\'"`

@example
<example module="app">
  <file name="app.js">
    var app = angular.module('app', ['ngTouch', 'ui.grid']);

    app.controller('MainCtrl', ['$scope', '$http', '$timeout', '$interval', function ($scope, $http, $timeout, $interval) {
      var start = new Date();
      var sec = $interval(function () {
        var wait = parseInt(((new Date()) - start) / 1000, 10);
        $scope.wait = wait + 's';
      }, 1000);

      // you could of course just include the template inline in your code, this example shows a template being returned from a function
      function rowTemplate() {
        return $timeout(function() {
          $scope.waiting = 'Done!';
          $interval.cancel(sec);
          $scope.wait = '';
          return '<div ng-class="{ \'my-css-class\': grid.appScope.rowFormatter( row ) }">' +
                     '  <div ng-if="row.entity.merge">{{row.entity.title}}</div>' +
                     '  <div ng-if="!row.entity.merge" ng-repeat="(colRenderIndex, col) in colContainer.renderedColumns track by col.colDef.name" class="ui-grid-cell" ng-class="{ \'ui-grid-row-header-cell\': col.isRowHeader }"  ui-grid-cell></div>' +
                     '</div>';
        }, 6000);
      }

      // Access outside scope functions from row template
      $scope.rowFormatter = function( row ) {
        return row.entity.gender === 'male';
      };

      $scope.waiting = 'Waiting for row template...';

      $http.get('/data/100.json')
        .success(function (data) {
          data.forEach( function(row, index) {
            row.widgets = index % 10;
          });
          data[1].merge = true;
          data[1].title = "A merged row";
          data[4].merge = true;
          data[4].title = "Another merged row";
          $scope.data = data;
        });

      $scope.gridOptions = {
        enableFiltering: true,
        rowTemplate: rowTemplate(),
        data: 'data',
        columnDefs: [
          { name: 'name' },
          { name: 'gender' },
          { name: 'company' },
          { name: 'widgets' },
          { name: 'cumulativeWidgets', field: 'widgets', cellTemplate: '<div class="ui-grid-cell-contents" title="TOOLTIP">{{grid.appScope.cumulative(grid, row)}}</div>' }
        ]
      };

      $scope.cumulative = function( grid, myRow ) {
        var myRowFound = false;
        var cumulativeTotal = 0;
        grid.renderContainers.body.visibleRowCache.forEach( function( row, index ) {
          if( !myRowFound ) {
            cumulativeTotal += row.entity.widgets;
            if( row === myRow ) {
              myRowFound = true;
            }
          }
        });
        return cumulativeTotal;
      };
    }]);
  </file>
  <file name="index.html">
    <div ng-controller="MainCtrl">
      <strong ng-bind="waiting"></strong> <strong>{{ wait }}</strong>
      <br>
      <div class="grid" ui-grid="gridOptions" ></div>
    </div>
  </file>
  <file name="main.css">
    .grid {
      width: 500px;
      height: 300px;
    }
     .my-css-class { color: blue }
  </file>
</example>
