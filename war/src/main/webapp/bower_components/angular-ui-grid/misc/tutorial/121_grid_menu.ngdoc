@ngdoc overview
@name Tutorial: 121 Grid Menu
@description The grid menu can be enabled through setting the gridOption `enableGridMenu`.  This
adds a settings icon in the top right of the grid, which floats above the column header.  The
menu by default gives access to show/hide columns, but can be customised to show additional
actions.

You can customize a the menu and provide your own functionality.  Each menu item can have:

- `shown`: a function that determines whether or not to display the item
- `title`: the title you'd like to have displayed for the menu item (note that you can also
use i18n on this through the `gridMenuTitleFilter` setting)
- `icon`: an icon you'd like displayed alongside the item
- `action`: a function that will be called when the menu is clicked
- `active`: a function that highlights the item (giving a toggle type effect - see the sort on the column menus for an example)
- `context`: by default, the `action`, `shown` and `active`'s' contexts will have a reference to the grid added as the
property `grid` (accessible through `this.grid`.  You can pass in your own context by supplying
the `context` property to your menu item. It will be accessible through `this.context`.
- `leaveOpen`: by default false, if set to true the menu will be left open after the action
- `order`: the order in the menu that you wish your item to be.  Columns are 300 -> 300 + numColumns * 2,
  importer and exporter are 150 and 200 respectively

The exporter feature also adds menu items to this menu.  The `exporterMenuCsv` option is set
to false, which suppresses csv export.  The 'export selected rows' option is only available
if at least one row is selected.

The column titles can have a custom filter defined using `gridMenuTitleFilter`, used when your
column headers have an internationalization filter (angular translate or i18nService), and you
want them also internationalized in the grid menu.  The translate needs to return either a string,
or a promise that will resolve to a string.  In the example below we create a fake
internationalization function that waits 1 second then prefixes each column with "col: ".

You can suppress the ability to show and hide columns by setting the gridOption `gridMenuShowHideColumns: false`,
you can suppress the ability to hide individual columns by setting `enableHiding` on that columnDef to false.

The gridMenu button is still a bit ugly.  If you have the skills to do so we'd welcome a PR that makes it pretty.
In the meantime, you can override the height to fit with your application in your css:
<pre>
  .ui-grid-menu-button {
    height: 31px;
  }
</pre>

@example
<example module="app">
  <file name="app.js">
    var app = angular.module('app', ['ngTouch', 'ui.grid', 'ui.grid.exporter', 'ui.grid.selection']);

    app.controller('MainCtrl', ['$scope', '$http', '$interval', '$q', function ($scope, $http, $interval, $q) {
      var fakeI18n = function( title ){
        var deferred = $q.defer();
        $interval( function() {
          deferred.resolve( 'col: ' + title );
        }, 1000, 1);
        return deferred.promise;
      };

      $scope.gridOptions = {
        exporterMenuCsv: false,
        enableGridMenu: true,
        gridMenuTitleFilter: fakeI18n,
        columnDefs: [
          { name: 'name' },
          { name: 'gender', enableHiding: false },
          { name: 'company' }
        ],
        gridMenuCustomItems: [
          {
            title: 'Rotate Grid',
            action: function ($event) {
              this.grid.element.toggleClass('rotated');
            },
            order: 210
          }
        ],
        onRegisterApi: function( gridApi ){
          $scope.gridApi = gridApi;

          // interval of zero just to allow the directive to have initialized
          $interval( function() {
            gridApi.core.addToGridMenu( gridApi.grid, [{ title: 'Dynamic item', order: 100}]);
          }, 0, 1);

          gridApi.core.on.columnVisibilityChanged( $scope, function( changedColumn ){
            $scope.columnChanged = { name: changedColumn.colDef.name, visible: changedColumn.colDef.visible };
          });
        }
      };

      $http.get('/data/100.json')
        .success(function(data) {
          $scope.gridOptions.data = data;
        });
    }]);
  </file>
  <file name="index.html">
    <div ng-controller="MainCtrl">
      <div id="grid1" ui-grid="gridOptions" ui-grid-exporter ui-grid-selection class="grid"></div>
      <div ng-if='columnChanged'>
        Column Visibility Changed - name: {{ columnChanged.name }} visible: {{ columnChanged.visible }}
      </div>
    </div>
  </file>
  <file name="main.css">
    .grid {
      width: 500px;
      height: 400px;
    }

    .my-custom-menu {
      position: absolute;
    }

    .my-custom-menu .ui-grid-menu {
      padding: 0px;
    }

    .my-custom-menu .ui-grid-menu-inner {
      -webkit-box-shadow: none;
      box-shadow: none;
    }

    .rotated {
      transform: rotate(180deg);
      -webkit-transform: rotate(180deg);
      -ms-transform: rotate(180deg);
      -moz-transform: rotate(180deg);
      -o-transform: rotate(180deg);
    }
  </file>
  <file name="scenario.js">
    var gridTestUtils = require('../../test/e2e/gridTestUtils.spec.js');

    describe('grid menu', function() {
      gridTestUtils.firefoxReload();

      it('grid1 should have three visible columns', function () {
        gridTestUtils.expectHeaderColumnCount( 'grid1', 3 );
      });

      it('grid1 grid menu should have 8 items', function () {
        gridTestUtils.expectVisibleGridMenuItems( 'grid1', 7 );
      });

      it('grid1 hide then show company column', function () {
        gridTestUtils.expectHeaderColumnCount( 'grid1', 3 );
        gridTestUtils.expectHeaderCellValueMatch( 'grid1', 0, 'Name' );
        gridTestUtils.expectHeaderCellValueMatch( 'grid1', 1, 'Gender' );
        gridTestUtils.expectHeaderCellValueMatch( 'grid1', 2, 'Company' );

        gridTestUtils.clickGridMenuItem( 'grid1', 12 )   // there are some hidden menu items, this is company_hide
          .then(function () {
            gridTestUtils.expectHeaderColumnCount( 'grid1', 2 );
            gridTestUtils.expectHeaderCellValueMatch( 'grid1', 0, 'Name' );
            gridTestUtils.expectHeaderCellValueMatch( 'grid1', 1, 'Gender' );

            return gridTestUtils.unclickGridMenu( 'grid1');  // menu stays open if change columns
          })
          .then(function() {
            return gridTestUtils.clickGridMenuItem( 'grid1', 13 );  // there are some hidden menu items, this is company_show
          })
          .then(function() {
            gridTestUtils.expectHeaderColumnCount( 'grid1', 3 );
            gridTestUtils.expectHeaderCellValueMatch( 'grid1', 0, 'Name' );
            gridTestUtils.expectHeaderCellValueMatch( 'grid1', 1, 'Gender' );
            gridTestUtils.expectHeaderCellValueMatch( 'grid1', 2, 'Company' );
          });
      });
    });

  </file>
</example>
