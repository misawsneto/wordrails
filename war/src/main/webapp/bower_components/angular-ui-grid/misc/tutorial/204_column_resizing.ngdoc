@ngdoc overview
@name Tutorial: 204 Column Resizing
@description

<div class="alert alert-success" role="alert"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>

The Resize Columns feature allows each column to be resized.

To enable, you must include the 'ui.grid.resizeColumns' module and you must include the ui-grid-resize-columns directive
on your grid element.

Documentation for the resize column feature is provided in the api documentation, in particular:

- {@link api/ui.grid.resizeColumns.api:ColumnDef columnDef}
- {@link api/ui.grid.resizeColumns.api:GridOptions gridOptions}
- {@link api/ui.grid.resizeColumns.api:PublicApi publicApi}

You can set individual columns to not be resizeable, if you do this it is recommended that those columns have a fixed
pixel width - otherwise they may get automatically resized to fill the remaining space if other columns are reduced in size,
and there will be no way to reduce their width again.

When you resize a column any other columns with fixed widths, or that have already been resized, retain their width.  All other
columns resize to take up the remaining space.  As long as there is at least one variable column left your columns won't reduce
below the full grid width - but once you've resized all the columns then you can end up with the total column width less than the
grid width.

<pre>
angular.module('yourApp', ['ui.grid', 'ui.grid.resizeColumns']);
</pre>

<pre>
<div ui-grid="gridOptions" class="grid" ui-grid-resize-columns></div>
</pre>
<br>
<br>
If, for some reason, you want to use the ui-grid-resize-columns directive, but not allow column resizing, you can explicitly set the
option to false. This prevents resizing for the entire grid, regardless of individual colDef options.
<pre>
$scope.gridOptions = {
  enableColumnResizing: false
};
</pre>
<br>
<br>
You can disable it on a column by setting the `enableColumnResizing` property to false in its column definition.
<pre>
$scope.gridOptions = {
  enableColumnResizing: true,
  columnDefs: [
    { field: 'name' },
    { field: 'gender', enableColumnResizing: false },
    { field: 'company' }
  ]
};
</pre>

@example
<example module="app">
  <file name="app.js">
    var app = angular.module('app', ['ngTouch', 'ui.grid', 'ui.grid.resizeColumns', 'ui.grid.moveColumns']);

    app.controller('MainCtrl', ['$scope', '$http', function ($scope, $http) {
      $scope.gridOptions = {
        enableSorting: true,
        columnDefs: [
          { field: 'name', minWidth: 200, width: 250, enableColumnResizing: false },
          { field: 'gender', width: '30%', maxWidth: 200, minWidth: 70 },
          { field: 'company', width: '20%' }
        ]
      };

      $http.get('/data/100.json')
        .success(function(data) {
          $scope.gridOptions.data = data;
        });
    }]);
  </file>
  <file name="index.html">
    <div ng-controller="MainCtrl">
      <strong>Drag</strong> a the column separator to resize; <strong>double-click</strong> to size according to rendered column contents.
      <br>
      <br>
      The column will obey any <i>minWidth</i> or <i>maxWidth</i> constraints you give it.
      <br>
      <br>
      <div ui-grid="gridOptions" class="grid" ui-grid-resize-columns ui-grid-move-columns></div>
    </div>
  </file>
  <file name="main.css">
    .grid {
      width: 500px;
      height: 400px;
    }
  </file>
</example>
