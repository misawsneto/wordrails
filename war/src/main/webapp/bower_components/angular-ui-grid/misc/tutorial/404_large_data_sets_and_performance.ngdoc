@ngdoc overview
@name Tutorial: 404 Large Data Sets and Performance
@description

The grid provides a richly featured component that allows very large data sets to be displayed without overloading
the browser.  It virtualises the rows and columns actually displayed, what this means is that it provides the illusion
of displaying many rows and columns, whilst actually showing the browser only the visible cells plus one or two columns
and rows either side of those currently visible.  The remainder of the grid canvas is white space, faked so as to have the
browser correctly show scroll bars that position you in the middle of this space.

In turn, this means that each time anything changes, in particular scrolling, the grid needs to determine whether it needs
to render additional rows or columns.  Rather than adding new rows or columns to the DOM (which is computationally expensive)
it instead shuffles which data elements the current rows and columns point to, and then adjusts the scroll to provide the illusion
that you are smoothly scrolling the grid.  If it weren't for the fact that the values inside each of the visible cells were being
changed rapidly, what you'd actually see is the same DOM cells scrolling to the left, then jumping back to the right as another column
comes into view, then scrolling smoothly to the left again.  

As you might expect, this can be quite computationally expensive.  Additionally, some operations such as sorting and filtering, must
work against the entire data set, not just those currently visible.

A different area of complexity in the grid is the provision of complex binding methods (refer {@link 106_binding the binding tutorial}).  
These binding methods add noticable overhead to every access to a cell value.  The combination of large data sets and these
binding methods can result in noticeable performance degradation.

All of this is a rather long winded way of saying that if we turn off those complex binding methods, many parts of the grid run
faster.

So, if you have a data array that consists purely of flat objects - and each column in your grid is tied to a single field in the
entities in that array (i.e. the way we think 90% of people use the grid), then you can turn off the support for complex binding,
and the grid will run faster.

The option for this is `flatEntityAccess`.  The below grid provides a toggle on this value so you can see the difference it makes
with a data set of 640,000 rows. 

Further, the grid watches the data and the column defs to determine if anything has changed.  Watches get called very frequently in
angularJS (on every digest cycle, which can be many times per second), and watching each row of a large data collection can be expensive.
The `fastWatch` gridOption watches only the data reference and it's length - in theory this means we might not notice if you replaced
a row in the data, or replaced a column in the columnDefs.  If using fastWatch you should always do deletes and adds separately, never
a swap.  Fastwatch cannot be dynamically toggled - you need to set it upon grid creation.

@example
<example module="app">
  <file name="app.js">
    var app = angular.module('app', ['ngAnimate', 'ngTouch', 'ui.grid']);

    app.controller('MainCtrl', ['$scope', '$http', 'uiGridConstants', function ($scope, $http, uiGridConstants) {
      $scope.gridOptions = {  
        enableFiltering: true,
        flatEntityAccess: true,
        showGridFooter: true,
        fastWatch: true
      };

       $scope.gridOptions.columnDefs = [
        {name:'id'},
        {name:'name'},
        {name:'gender'},
        {field:'age'}
      ];
    
      $http.get('/data/10000_complex.json')
      .success(function(data) {
        for( var i=0; i<6; i++){
          data = data.concat(data);
        }
        $scope.gridOptions.data = data;
      });
      
      $scope.toggleFlat = function() {
        $scope.gridOptions.flatEntityAccess = !$scope.gridOptions.flatEntityAccess;
      }
    }]);
  </file>
  <file name="index.html">
    <div ng-controller="MainCtrl">
      <button id="toggleFlat" ng-click="toggleFlat()" class="btn btn-success" >Toggle Flat Access</button><span>  Current setting: {{gridOptions.flatEntityAccess}}</span>
      <div id="grid1" ui-grid="gridOptions" class="grid"></div>
    </div>
  </file>
  <file name="main.css">
    .grid {
      width: 650px;
      height: 400px;
    }
  </file>
  <file name="scenario.js">
  </file>  
</example>