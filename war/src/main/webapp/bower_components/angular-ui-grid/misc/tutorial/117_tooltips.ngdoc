@ngdoc overview
@name Tutorial: 117 Tooltips
@description

You can set a tooltip (actually, a title) to pop up when a user hovers over a cell.

This tooltip can be simply the cell contents, in which case set the columnDef to have
`cellTooltip: true`.

Or it can be a function that returns a value derived from the 
current column and row - for example:

```
  cellTooltip: function(row, col) {
    return 'Name: ' + row.entity.name + ' Company: ' + row.entity.company;
  }
```

Or it can be a string, in which case that string will be displayed:

```
  cellTooltip: 'Custom tooltip - maybe some help text'
```


You can also set a headerTooltip in a similar manner, it defaults to showing the displayName.

Note that turning on tooltips will create an extra watcher per cell, so it has an impact on overall grid
performance, it is not recommended to turn them on for every column, rather only for the columns likely to have
data that won't be displayable within the grid row (e.g. long description fields).

Tooltips respect the cellFilter, so if you define a cellFilter it will also be used in the tooltip.

<example module="app">
  <file name="app.js">
    var app = angular.module('app', ['ngAnimate', 'ngTouch', 'ui.grid']);

    app.controller('MainCtrl', ['$scope', '$http', 'uiGridConstants', function ($scope, $http, uiGridConstants) {
      $scope.gridOptions = {
        enableSorting: true,
        columnDefs: [
          { field: 'name', cellTooltip: 'Custom string', headerTooltip: 'Custom header string' },
          { field: 'company', cellTooltip: 
            function( row, col ) {
              return 'Name: ' + row.entity.name + ' Company: ' + row.entity.company;
            }, headerTooltip: 
            function( col ) {
              return 'Header: ' + col.displayName;
            }
          },
          { field: 'gender', cellTooltip: true, headerTooltip: true, cellFilter: 'mapGender' },
        ],
        onRegisterApi: function( gridApi ) {
          $scope.gridApi = gridApi;
          $scope.gridApi.core.on.sortChanged( $scope, function( grid, sort ) {
            $scope.gridApi.core.notifyDataChange( uiGridConstants.dataChange.COLUMN );
          })
        }
      };

      $http.get('/data/100.json')
        .success(function(data) {
          data.forEach( function setGender( row, index ){
            row.gender = row.gender==='male' ? '1' : '2';
          });

          $scope.gridOptions.data = data;
        });
    }])
    .filter('mapGender', function() {
      var genderHash = {
        1: 'male',
        2: 'female'
      };

      return function(input) {
        if (!input){
          return '';
        } else {
          return genderHash[input];
        }
      };
    });
  </file>
  <file name="index.html">
    <div ng-controller="MainCtrl">
      <br>
      <br>
      <div id="grid1" ui-grid="gridOptions" class="grid"></div>
    </div>
  </file>
  <file name="main.css">
    .grid {
      width: 500px;
      height: 200px;
    }
    .red { color: red;  background-color: yellow !important; }
    .blue { color: blue;  }
  </file>
  <file name="scenario.js">
    var gridTestUtils = require('../../test/e2e/gridTestUtils.spec.js');
  </file>
</example>

