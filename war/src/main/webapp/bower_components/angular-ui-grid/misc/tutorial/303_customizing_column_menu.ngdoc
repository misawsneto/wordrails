@ngdoc overview
@name Tutorial: 303 Customizing Column Menu
@description

You can customize a column's menu and provide your own functionality.  Each menu item can have:

- `shown`: a function that determines whether or not to display the item
- `title`: the title you'd like to have displayed for the menu item (note that you can also
use i18n on this through the `gridMenuTitleFilter` setting)
- `icon`: an icon you'd like displayed alongside the item
- `action`: a function that will be called when the menu is clicked
- `active`: a function that highlights the item (giving a toggle type effect - see the sort on the column menus for an example)
- `context`: by default, the `action`, `shown` and `active`'s' contexts will have a reference to the grid added as the
property `grid` (accessible through `this.grid`.  You can pass in your own context by supplying
the `context` property to your menu item. It will be accessible through `this.context`.

The column menu will add the column's `GridColumn` object to the context as `this.context.col`.
You can then show/hide the the menu item based on conditions that use the grid and column.  You could
also use a custom column builder to add some item to the every column definition.

You can remove the column hide option using the `enableHiding: false` columnDef option, which will also prevent
this column being hidden in the gridMenu (once it is finished and merged).  You can disable
the column menu entirely using the `enableColumnMenu: false` columnDef option.

You can disable all column menus using the `enableColumnMenus: false` grid option.

You can supply an icon class with the `icon` property.

See the example below for usage.


@example
<example module="app">
  <file name="app.js">
    var app = angular.module('app', ['ngAnimate', 'ngTouch', 'ui.grid']);

    app.controller('MainCtrl', ['$scope', '$http', 'uiGridConstants', function ($scope, $http, uiGridConstants) {
      $scope.blargh = function() {
        alert("I'm in the outer scope!");
      };

      $scope.gridOptions = {
        enableSorting: true,
        columnDefs: [
          { field: 'name', enableColumnMenu: false },
          { field: 'gender', enableHiding: false, suppressRemoveSort: true, sort: { direction: uiGridConstants.ASC } },
          {
            field: 'company',
            menuItems: [
              {
                title: 'Outer Scope Alert',
                icon: 'ui-grid-icon-info-circled',
                action: function($event) {
                  this.context.blargh(); // $scope.blargh() would work too, this is just an example
                },
                context: $scope
              },
              {
                title: 'Grid ID',
                action: function() {
                  alert('Grid ID: ' + this.grid.id);
                }
              },
              {
                title: 'Column Title Alert',
                shown: function () {
                  return this.context.col.displayName === 'Company';
                },
                action: function() {
                  alert(this.context.col.displayName);
                }
              }
            ]
          }
        ]
      };

      $http.get('/data/100.json')
        .success(function(data) {
          $scope.gridOptions.data = data;
        });
    }]);
  </file>
  <file name="index.html">
    <div ng-controller="MainCtrl">
      Click on the third column header to test custom menu items.  The first column should have no
      column menu available, including via a long-press.  The second column should have a menu, but the
      ability to remove the sort is suppressed - the user can toggle between ASC and DESC but not remove
      the sort.
      <br>
      <br>
      <div id="grid1" ui-grid="gridOptions" class="grid"></div>
    </div>
  </file>
  <file name="main.css">
    .grid {
      width: 500px;
      height: 400px;
    }
  </file>
  <file name="scenario.js">
    var gridTestUtils = require('../../test/e2e/gridTestUtils.spec.js');

    describe('column menus', function() {
      // Reload the page before each test if on Firefox. Chrome does it automatically.
      gridTestUtils.firefoxReload();

      it('grid1 should have three visible columns', function () {
        gridTestUtils.expectHeaderColumnCount( 'grid1', 3 );
      });

      it('no column menu on first column, including from long press', function () {
        var headerCell = gridTestUtils.headerCell( 'grid1', 0 );
        expect( headerCell.all( by.css( '.ui-grid-column-menu-button' ) ).count()).toEqual(0);

        browser.actions()
          .mouseDown(headerCell, protractor.Button.LEFT)
          .perform()
          .then(function () {
            return browser.sleep(550);  // 500ms for long press
          })
          .then(function () {
            return browser.actions().mouseUp(headerCell, protractor.Button.LEFT).perform()
          })
          .then(function () {
            var columnMenu = element( by.id( 'grid1' ) ).element( by.css( '.ui-grid-column-menu' ) ).all( by.css( '.ui-grid-menu-inner' ));
            expect(columnMenu.count()).toEqual(0);
          })
      });

      it('3 menu items in second column, implying no hide option and no remove sort option', function () {
        gridTestUtils.expectVisibleColumnMenuItems( 'grid1', 1, 3 );
      });

      it('Long press opens menu in second column', function () {
        var headerCell = gridTestUtils.headerCell( 'grid1', 1 );

        browser.actions()
          .mouseDown(headerCell, protractor.Button.LEFT)
          .perform()
          .then(function () {
            return browser.sleep(550);  // 500ms for long press
          })
          // Wait for element to be present b/c Firefox is kinda slow
          .then(function () {
            var el = element( by.id( 'grid1' ) ).element( by.css( '.ui-grid-column-menu' ) ).element( by.css( '.ui-grid-menu-inner' ));

            return browser.wait(function () {
              return el.isPresent();
            }, 2000);
          })
          .then(function () {
            return browser.actions().mouseUp(headerCell, protractor.Button.LEFT).perform()
          })
          .then(function () {
            var columnMenu = element( by.id( 'grid1' ) ).element( by.css( '.ui-grid-column-menu' ) ).element( by.css( '.ui-grid-menu-inner' ));
            expect(columnMenu.isDisplayed()).toEqual(true, 'column menu should be displayed');
          });
      });

      it('Column 2 rotates through sort ASC and sort DESC, but no sort null', function () {
        gridTestUtils.expectCellValueMatch( 'grid1', 0, 1, 'female' );
        gridTestUtils.expectCellValueMatch( 'grid1', 1, 1, 'female' );
        gridTestUtils.expectCellValueMatch( 'grid1', 2, 1, 'female' );
        gridTestUtils.expectCellValueMatch( 'grid1', 3, 1, 'female' );

        gridTestUtils.clickHeaderCell( 'grid1', 1 )
          .then(function () {
            gridTestUtils.expectCellValueMatch( 'grid1', 0, 1, 'male' );
            gridTestUtils.expectCellValueMatch( 'grid1', 1, 1, 'male' );
            gridTestUtils.expectCellValueMatch( 'grid1', 2, 1, 'male' );
            gridTestUtils.expectCellValueMatch( 'grid1', 3, 1, 'male' );

            return gridTestUtils.clickHeaderCell( 'grid1', 1 );
          })
          .then(function () {
            gridTestUtils.expectCellValueMatch( 'grid1', 0, 1, 'female' );
            gridTestUtils.expectCellValueMatch( 'grid1', 1, 1, 'female' );
            gridTestUtils.expectCellValueMatch( 'grid1', 2, 1, 'female' );
            gridTestUtils.expectCellValueMatch( 'grid1', 3, 1, 'female' );
          });
      });

      it('7 visible items in the third column, implying hide option', function () {
        gridTestUtils.expectVisibleColumnMenuItems( 'grid1', 2, 7 );
      });

      it('click header to sort third column, 8 visible items in the third column, implying remove sort option', function () {
        gridTestUtils.clickHeaderCell( 'grid1', 2 )
          .then(function () {
            gridTestUtils.expectVisibleColumnMenuItems( 'grid1', 2, 8 );
          });
      });
    });

  </file>
</example>
