@ngdoc overview
@name Tutorial: 102 Sorting
@description

UI-Grid allows you to sort rows. The feature is on by default. You can set the `enableSorting` flag in your grid options to enable/disable it.

<span class="col-xs-12 alert alert-warning">
  <strong>Note:</strong> You can sort columns by accessing the column menu. You must include ngAnimate in your application if you want the menu to slide up/down, but it's not required.
</span>

Sorting can be disabled at the column level by setting `enableSorting: false` in the column def. See the last column below for an example.

Multiple columns can be sorted by shift-clicking on the 2-n columns.  To see it in action, sort Gender then shift-click Name.

When sorting using the menus, the sorts are additive.  So if you have one column sorted and you pick another sort
from a column menu, it will add on to the existing sort rather than replacing it.  You need to use the 'remove sort' option
on the existing column if you don't want to sort by it any more.

When sorting using the headers, clicking on a header removes all other sorts unless you shift-click.

The sort is automatically recalculated when you edit a field (the edit feature calls the dataChange api to notify of a data change).  If
you change the data "behind the scenes" and want the sort to be recalculated, you can notify the grid that your
data has changed by calling `gridApi.core.notifyDataChange( uiGridConstants.dataChange.EDIT )`

If you set a default sort, you can prevent the user from removing that sort by setting `suppressRemoveSort: true`
for that column.  This will let the user change the direction of the sort, but take away the option to remove the sort.

When clicking on a column heading the sort direction will cycle to ascending, then descending, then back to unsorted.
You may rearrange this cycle or skip part of it by setting the
{@link api/ui.grid.class:GridOptions.columnDef#sortDirectionCycle sortDirectionCycle} columnDef option.

The sort algorithm is chosen based on the column type.  ui-grid will guess the type based on the data, although if you load data
asynchronously after the columns it will often decide all your columns are string.  You can explicitly set the column type in the
column def using `type='number'`.  Valid types are documented in {@link api/ui.grid.class:GridOptions.columnDef columnDef}, and
include `string`, `number`, `numberStr` and `date`.  If you use date be aware the code expects a javascript date object.

You can pass in a custom sorting algorithm to a column by setting the
{@link api/ui.grid.class:GridOptions.columnDef#sortingAlgorithm sortingAlgorithm} columnDef option.
The sorting algorithm function takes 'a' and 'b' parameters like any normal sorting function with additional
'rowA', 'rowB', and 'direction' parameters that are the row objects and the current direction of the sort respectively.

By default the sorting algorithm will be applied to the row value before any `cellFilters` are applied. The {@link api/ui.grid.class:GridOptions.columnDef#sortCellFiltered sortCellFiltered}
columnDef option will cause sorting to be applied after the `cellFilters` are applied. For an example of this see the "Month Joined" column in the {@link 401_AllFeatures AllFeatures tutorial}.

<example module="app">
  <file name="app.js">
    var app = angular.module('app', ['ngAnimate', 'ngTouch', 'ui.grid']);

    app.controller('MainCtrl', ['$scope', '$http', 'uiGridConstants', function ($scope, $http, uiGridConstants) {
      $scope.gridOptions1 = {
        enableSorting: true,
        columnDefs: [
          { field: 'name' },
          { field: 'gender' },
          { field: 'company', enableSorting: false }
        ],
        onRegisterApi: function( gridApi ) {
          $scope.grid1Api = gridApi;
        }
      };

      $scope.toggleGender = function() {
        if( $scope.gridOptions1.data[64].gender === 'male' ) {
          $scope.gridOptions1.data[64].gender = 'female';
        } else {
          $scope.gridOptions1.data[64].gender = 'male';
        };
        $scope.grid1Api.core.notifyDataChange( uiGridConstants.dataChange.EDIT );
      };

       $scope.gridOptions2 = {
        enableSorting: true,
        onRegisterApi: function( gridApi ) {
          $scope.grid2Api = gridApi;
        },
        columnDefs: [
          {
            field: 'name',
            sort: {
              direction: uiGridConstants.DESC,
              priority: 1
            }
          },
          {
            field: 'gender',
            sort: {
              direction: uiGridConstants.ASC,
              priority: 0,
            },
            suppressRemoveSort: true,
            sortingAlgorithm: function(a, b, rowA, rowB, direction) {
              var nulls = $scope.grid2Api.core.sortHandleNulls(a, b);
              if( nulls !== null ) {
                return nulls;
              } else {
                if( a === b ) {
                  return 0;
                }
                if( a === 'male' ) {
                  return 1;
                }
                if( b === 'male' ) {
                  return -1;
                }
                if( a == 'female' ) {
                  return 1;
                }
                if( b === 'female' ) {
                  return -1;
                }
                return 0;
              }
            }
          },
          { field: 'company', enableSorting: false  }
        ]
      };

     $http.get('/data/100.json')
        .success(function(data) {
          $scope.gridOptions1.data = data;
          $scope.gridOptions2.data = data;
        });
    }]);
  </file>
  <file name="index.html">
    <div ng-controller="MainCtrl">
      Click on a column header to sort by that column. (The third column has sorting disabled.)
      To demonstrate the live sorting we provide a button that toggles the gender of Alexander Foley.
      Sort by gender (ASC - so click twice) then name (using shift click), so that Alexander is at the top of the grid,
      then click the toggleGender button.

      <br>
      <br>
      <button id='toggleGender' ng-click='toggleGender()' class="btn btn-success" >Toggle Gender</button>
      <div id="grid1" ui-grid="gridOptions1" class="grid"></div>

      <br>
      You can set an initial sort state for the grid by defining the `sort` property on your column definitions.
      The `direction` sub-property says which way to sort, and the `priority` says what order to sort the columns
      in (lower priority gets sorted first).
      <br>
      <br>

      <div id="grid2" ui-grid="gridOptions2" class="grid"></div>
    </div>
  </file>
  <file name="main.css">
    .grid {
      width: 500px;
      height: 200px;
    }
  </file>
  <file name="scenario.js">
    var gridTestUtils = require('../../test/e2e/gridTestUtils.spec.js');
    var GridObjectTest = require('../../test/e2e/gridObjectTestUtils.spec.js');
    var grid1 = new GridObjectTest('grid1');
    var grid2 = new GridObjectTest('grid2');

    describe('first grid on the page, no default sort', function() {
      // Reload the page before each test if on Firefox. Chrome does it automatically.
      gridTestUtils.firefoxReload();

      it('header values should be as expected', function () {
        grid1.expectHeaderColumns( [ 'Name', 'Gender', 'Company' ] );
      });

      it('grid should be unsorted by default', function () {
        grid1.expectCellValueMatch( 0, 0, 'Ethel Price' );
        grid1.expectCellValueMatch( 1, 0, 'Claudine Neal' );
      });

      it('sort by name by clicking header', function () {
        grid1.clickHeaderCell( 0 )
          .then(function () {
            grid1.expectCellValueMatch( 0, 0, 'Alexander Foley' );
            grid1.expectCellValueMatch( 1, 0, 'Alisha Myers' );
          });
      });

      it('reverse sort by name by clicking header', function () {
        grid1.clickHeaderCell( 0 )
          .then(function () {
            return grid1.clickHeaderCell( 0 );
          })
          .then(function () {
            grid1.expectCellValueMatch( 0, 0, 'Yvonne Parsons' );
            grid1.expectCellValueMatch( 1, 0, 'Woods Key' );
          });
      });

      it('return to original sort by name by clicking header', function () {
        grid1.clickHeaderCell( 0 )
          .then(function () {
            return grid1.clickHeaderCell( 0 );
          })
          .then(function () {
            return grid1.clickHeaderCell( 0 );
          })
          .then(function () {
            grid1.expectCellValueMatch( 0, 0, 'Ethel Price' );
            grid1.expectCellValueMatch( 1, 0, 'Claudine Neal' );
          });
      });

      it('sort asc by clicking menu', function() {
        grid1.clickColumnMenuSortAsc( 0 )
          .then(function () {
            grid1.expectCellValueMatch( 0, 0, 'Alexander Foley' );
            grid1.expectCellValueMatch( 1, 0, 'Alisha Myers' );
          });
      });

      it('sort desc by clicking menu, then remove sort', function() {
        grid1.clickColumnMenuSortDesc( 0 )
          .then(function () {
            grid1.expectCellValueMatch( 0, 0, 'Yvonne Parsons' );
            grid1.expectCellValueMatch( 1, 0, 'Woods Key' );
            return true;
          })
          .then(function () {
            return grid1.clickColumnMenuRemoveSort( 0 );
          })
          .then(function () {
            grid1.expectCellValueMatch( 0, 0, 'Ethel Price' );
            grid1.expectCellValueMatch( 1, 0, 'Claudine Neal' );
          });
      });

      it('sort two columns, gender then name, by shift clicking', function() {
        grid1.clickHeaderCell( 1 )
          .then(function () {
            return grid1.shiftClickHeaderCell( 0 );
          })
          .then(function () {
            grid1.expectCellValueMatch( 0, 0, 'Alisha Myers' );
            grid1.expectCellValueMatch( 1, 0, 'Beryl Rice' );
          });
      });

      it('sort disabled on last column', function() {
        grid1.clickHeaderCell( 2 )
          .then(function () {
            grid1.expectCellValueMatch( 0, 0, 'Ethel Price' );
            grid1.expectCellValueMatch( 1, 0, 'Claudine Neal' );
          });
      });

      it('click one menu, then click another menu, expect undisplay and redisplay on second click', function() {
        grid1.expectVisibleColumnMenuItems( 0, 4 );
        grid1.expectVisibleColumnMenuItems( 1, 4 );
      });

      it('toggle gender, expect Alexander Foley to move around', function() {
        // sort gender asc, then name
        grid1.clickHeaderCell( 1 )
          .then(function () {
            return grid1.clickHeaderCell( 1 );
          })
          .then(function () {
            return grid1.shiftClickHeaderCell( 0 );
          })
          .then(function () {
            grid1.expectCellValueMatch( 0, 0, 'Alexander Foley' );
          })
          .then(function () {
            return gridTestUtils.click(element(by.id('toggleGender')));
          })
          .then(function () {
            grid1.expectCellValueMatch( 0, 0, 'Anthony Joyner' );
          })
          .then(function () {
            return gridTestUtils.click(element(by.id('toggleGender')));
          })
          .then(function () {
            grid1.expectCellValueMatch( 0, 0, 'Alexander Foley' );
          });
      });

    });


    describe('second grid on the page, has default sort', function() {
      it('header values should be as expected', function () {
        grid2.expectHeaderColumns( [ 'Name', 'Gender', 'Company' ] );
      });

      it('grid should be sorted by default', function () {
        grid2.expectCellValueMatch( 0, 0, 'Yvonne Parsons' );
        grid2.expectCellValueMatch( 1, 0, 'Velma Fry' );
      });

      it('sort on second column can\'t be removed when cycle through header clicks', function () {
        grid2.clickHeaderCell( 0 )
          .then(function () {
            grid2.expectCellValueMatch( 0, 0, 'Ethel Price' );
          })
          .then(function () {
            return grid2.clickHeaderCell( 1 );
          })
          .then(function () {
            grid2.expectCellValueMatch( 0, 0, 'Wilder Gonzales' );
          })
          .then(function () {
            return grid2.clickHeaderCell( 1 );
          })
          .then(function () {
            grid2.expectCellValueMatch( 0, 0, 'Ethel Price' );
          });
      });
    });

  </file>
</example>
