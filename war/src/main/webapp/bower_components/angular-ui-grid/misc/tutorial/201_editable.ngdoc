@ngdoc overview
@name Tutorial: 201 Edit Feature
@description

<div class="alert alert-success" role="alert"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>

The ui.grid.edit feature allows inline editing of grid data.  To enable, you must include the `'ui.grid.edit'` module
and you must include the `ui-grid-edit` directive on your grid element.

Documentation for the edit feature is provided in the api documentation, in particular:

- {@link api/ui.grid.edit.api:ColumnDef columnDef}
- {@link api/ui.grid.edit.api:GridOptions gridOptions}
- {@link api/ui.grid.edit.api:PublicApi publicApi}

You can use the `enableCellEdit` options in your column definitions to allow a column to be editable.

Editing is invoked via double-click, f2, or start typing any non-navigable key. Cell editing ends on tab, enter or esc (cancel)
on an input editor, and tab, left or right arrows, enter or esc for a dropdown.

By default an input element is provided, with numeric, date and checkbox editors for fields specified as `'number'`, `'date'`
and `'boolean'` types, for all other fields a simple text editor is provided. (A point to note about date editors is that for date editors
to be enabled the datatype of the variable should also be "Date").

A dropdown editor is also available, through setting the `editableCellTemplate` on the `columnDef` to `'ui-grid/dropdownEditor'`.
When using a dropdown editor you need to provide an options array through the `editDropDownOptionsArray` property on the `columnDef`.
This array by default should be an array of `{id: xxx, value: xxx}`, although the field tags can be changed through
using the `editDropdownIdLabel` and `editDropdownValueLabel` options.

A file chooser is available, through setting the 'editableCellTemplate` on the `columnDef` to `'ui-grid/fileChooserEditor'`.  This
file chooser will open the file chosen by the user and assign the value of that file to the model element.  In the example below
we use the file chooser to load a file, and we display the filename in the cell.  The file is stored against the row in a hidden
column, which we can save to our server or otherwise process.

Custom edit templates should be used for any editor other than the default editors, but be aware that you will likely also
need to provide a custom directive similar to the uiGridEditor directive so as to provide `BEGIN_CELL_EDIT, CANCEL_CELL_EDIT
and END_CELL_EDIT` events.

__ColumnDef Options__:

- `editModelField` (default: undefined) - a bindable expression to use instead of colDef.field when binding the edit control.
- `editableCellTemplate` (default: `'ui-grid/cellEditor'`) - Valid html, templateCache Id,  or url that returns html
  content to be compiled when edit mode is invoked.
- `enableCellEdit` (default: `false` for columns of type `'object'`, `true` for all other columns) - `true` will enable
  editing and `false` will disable it.
- `cellEditableCondition`  (default: `true`)  Can be set to a boolean or a function that will be called with the cellScope
  to determine if the cell should be invoked in edit mode.
- `type` (default: `'string'`) If set to `'number'`, `'boolean'` or `'date'` the default editor provided for editing will be numeric
  or boolean or date editor respectively.  If set to `'object'` the column will not be editable by default.  Be aware that this
  `type` column is also used for other purposes within ui-grid, including the sorting logic.
- `editDropdownOptionsArray` If a dropdown, needs to be populated with an array of values, by default those values should be
  `{id: xxx, value: xxx}`, the labels can be adjusted with the next two options
- `editDropdownIdLabel` (default: `'id'`) Controls the id label in the options array - so if your array happens to contain
   `'code'` instead you can use it without having to reprocess the array
- `editDropdownValueLabel` (default: `'value'`) Controls the value label in the options array - if your array happens to
  contain `'name'` instead you can use it without having to reprocess the array
- `editDropdownRowEntityOptionsArrayPath` can be used as an alternative to editDropdownOptionsArray when the contents of the dropdown depend on the entity backing the row.
- `editDropdownOptionsFunction` can be used as yet another alternative to editDropdownOptionsArray when the contents can be retrieved with a function whose parameters are row entity and column definition.
- `editDropdownFilter` (default: `''`) Allows you to apply a filter to the values in the edit dropdown options, for example
  if you were using angular-translate you would set this to `'translate'`

The following option is available only if using cellNav feature

- `enableCellEditOnFocus` - `true` to invoke editor as soon as cell has focus

_Note that the edit functionality uses native html5 edit widgets - the date picker, the dropdown and the input box
itself.  If your browser does not implement these widgets, then you won't get them.  If your browser implements these
widgets in a way that isn't ideal (for example, some browsers don't allow number fields to start with '.', so you can't
type in '.5'), then you need to provide a custom editor instead.  On the medium term roadmap there is intent
to provide a bootstrap feature, which would provide directives that were compatible with angular-bootstrap directives,
allowing use of the bootstrap datepicker and input fields_


<pre>
$scope.gridOptions.columnDefs = [
   { name: 'name', enableCellEdit: true },
   { name: 'age', enableCellEdit: true, type: 'number'},
   { name: 'registered', displayName: 'Registered' , type: 'date'},
   { name: 'address', displayName: 'Address', type: 'object'},
   { name: 'address.city', enableCellEdit: true, displayName: 'Address (even rows editable)', cellEditableCondition: function($scope){return $scope.rowRenderIndex%2} }
   { name: 'isActive', enableCellEdit: true, type: 'boolean'},
]
</pre>


@example
<example module="app">
  <file name="app.js">
    var app = angular.module('app', ['ngTouch', 'ui.grid', 'ui.grid.edit', 'addressFormatter']);

    angular.module('addressFormatter', []).filter('address', function () {
      return function (input) {
          return input.street + ', ' + input.city + ', ' + input.state + ', ' + input.zip;
      };
    });

    app.controller('MainCtrl', ['$scope', '$http', '$timeout', function ($scope, $http, $timeout) {
      $scope.gridOptions = {  };

      $scope.storeFile = function( gridRow, gridCol, files ) {
        // ignore all but the first file, it can only select one anyway
        // set the filename into this column
        gridRow.entity.filename = files[0].name;

        // read the file and set it into a hidden column, which we may do stuff with later
        var setFile = function(fileContent){
          gridRow.entity.file = fileContent.currentTarget.result;
          // put it on scope so we can display it - you'd probably do something else with it
          $scope.lastFile = fileContent.currentTarget.result;
          $scope.$apply();
        };
        var reader = new FileReader();
        reader.onload = setFile;
        reader.readAsText( files[0] );
      };

      $scope.gridOptions.columnDefs = [
        { name: 'id', enableCellEdit: false, width: '10%' },
        { name: 'name', displayName: 'Name (editable)', width: '20%' },
        { name: 'age', displayName: 'Age' , type: 'number', width: '10%' },
        { name: 'gender', displayName: 'Gender', editableCellTemplate: 'ui-grid/dropdownEditor', width: '20%',
          cellFilter: 'mapGender', editDropdownValueLabel: 'gender', editDropdownOptionsArray: [
          { id: 1, gender: 'male' },
          { id: 2, gender: 'female' }
        ] },
        { name: 'registered', displayName: 'Registered' , type: 'date', cellFilter: 'date:"yyyy-MM-dd"', width: '20%' },
        { name: 'address', displayName: 'Address', type: 'object', cellFilter: 'address', width: '30%' },
        { name: 'address.city', displayName: 'Address (even rows editable)', width: '20%',
             cellEditableCondition: function($scope){
             return $scope.rowRenderIndex%2
             }
        },
        { name: 'isActive', displayName: 'Active', type: 'boolean', width: '10%' },
        { name: 'pet', displayName: 'Pet', width: '20%', editableCellTemplate: 'ui-grid/dropdownEditor',
          editDropdownRowEntityOptionsArrayPath: 'foo.bar[0].options', editDropdownIdLabel: 'value'
        },
        { name: 'status', displayName: 'Status', width: '20%', editableCellTemplate: 'ui-grid/dropdownEditor',
          cellFilter: 'mapStatus',
          editDropdownOptionsFunction: function(rowEntity, colDef) {
            var single;
            var married = {id: 3, value: 'Married'};
            if (rowEntity.gender === 1) {
              single = {id: 1, value: 'Bachelor'};
              return [single, married];
            } else {
              single = {id: 2, value: 'Nubile'};
              return $timeout(function() {
                return [single, married];
              }, 100);
            }
          }
        },
        { name: 'filename', displayName: 'File', width: '20%', editableCellTemplate: 'ui-grid/fileChooserEditor',
          editFileChooserCallback: $scope.storeFile }
      ];

     $scope.msg = {};

     $scope.gridOptions.onRegisterApi = function(gridApi){
              //set gridApi on scope
              $scope.gridApi = gridApi;
              gridApi.edit.on.afterCellEdit($scope,function(rowEntity, colDef, newValue, oldValue){
                $scope.msg.lastCellEdited = 'edited row id:' + rowEntity.id + ' Column:' + colDef.name + ' newValue:' + newValue + ' oldValue:' + oldValue ;
                $scope.$apply();
              });
            };

      $http.get('/data/500_complex.json')
        .success(function(data) {
          for(i = 0; i < data.length; i++){
            data[i].registered = new Date(data[i].registered);
            data[i].gender = data[i].gender==='male' ? 1 : 2;
            if (i % 2) {
              data[i].pet = 'fish'
              data[i].foo = {bar: [{baz: 2, options: [{value: 'fish'}, {value: 'hamster'}]}]}
            }
            else {
              data[i].pet = 'dog'
              data[i].foo = {bar: [{baz: 2, options: [{value: 'dog'}, {value: 'cat'}]}]}
            }
          }
          $scope.gridOptions.data = data;
        });
    }])

    .filter('mapGender', function() {
      var genderHash = {
        1: 'male',
        2: 'female'
      };

      return function(input) {
        if (!input){
          return '';
        } else {
          return genderHash[input];
        }
      };
    })
    
    .filter('mapStatus', function() {
      var genderHash = {
        1: 'Bachelor',
        2: 'Nubile',
        3: 'Married'
      };

      return function(input) {
        if (!input){
          return '';
        } else {
          return genderHash[input];
        }
      };
    })
  });
  </file>
  <file name="index.html">
    <div ng-controller="MainCtrl">
      <strong>Data Length:</strong> {{ gridOptions.data.length | number }}
      <br>
      <strong>Last Cell Edited:</strong> {{msg.lastCellEdited}}
      <br>
      <div ui-grid="gridOptions" ui-grid-edit class="grid"></div>
      <br>
      <div><strong>Last file uploaded:</strong></div>
      <div>{{lastFile}}</div>
    </div>
  </file>
  <file name="main.css">
    .grid {
      width: 600px;
      height: 450px;
    }
  </file>
</example>
